{"version":3,"sources":["src/index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["startButton","document","querySelector","statusSpan","heading","padContainer","newHeader","greenPizzaPad","redPizzaPad","bluePizzaPad","yellowPizzaPad","computerSequence","playerSequence","maxRoundCount","roundCount","pads","color","selector","sound","Audio","addEventListener","padHandler","startButtonHandler","setLevel","classList","add","remove","playComputerTurn","event","target","dataset","pad","find","_color","play","checkPress","level","levels","Map","set","has","get","getRandomItem","collection","length","randomIndex","Math","floor","random","setText","element","text","textContent","activatePad","setTimeout","activatePads","sequence","forEach","index","innerHTML","push","playHumanTurn","remainingPresses","resetGame","checkRound","alert","window","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","JSON","parse","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","body","appendChild","getElementById","createElement","stackTrace","innerText","getParents","modules","parents","k","d","dep","Array","isArray","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["/**\n * DOM SELECTORS\n */\n\n const startButton = document.querySelector(\".js-start-button\");\n\n const statusSpan = document.querySelector(\".js-status\"); \n const heading = document.querySelector(\".js-heading\"); \n const padContainer = document.querySelector(\".js-pad-container\");\n const newHeader = document.querySelector(\".js-header-message\");\n\n\nconst greenPizzaPad = document.querySelector(\".js-pad-green\");\nconst redPizzaPad = document.querySelector(\".js-pad-red\");\nconst bluePizzaPad = document.querySelector(\".js-pad-blue\");\nconst yellowPizzaPad = document.querySelector(\".js-pad-yellow\");\n\n\n/**\n * VARIABLES\n */\nlet computerSequence = []; // track the computer-generated sequence of pad presses\nlet playerSequence = []; // track the player-generated sequence of pad presses\nlet maxRoundCount = 0; // the max number of rounds, varies with the chosen level\nlet roundCount = 0; // track the number of rounds that have been played so far\n\n/**\n *\n * The `pads` array contains an array of pad objects.\n *\n * Each pad object contains the data related to a pad: `color`, `sound`, and `selector`.\n * - The `color` property is set to the color of the pad (e.g., \"red\", \"blue\").\n * - The `selector` property is set to the DOM selector for the pad.\n * - The `sound` property is set to an audio file using the Audio() constructor.\n *\n * Audio file for the green pad: \"../assets/simon-says-sound-2.mp3\"\n * Audio file for the blue pad: \"../assets/simon-says-sound-3.mp3\"\n * Audio file for the yellow pad: \"../assets/simon-says-sound-4.mp3\"\n *\n */\n\n const pads = [\n  {\n    color: \"red\",\n    selector: document.querySelector(\".js-pad-red\"),\n    sound: new Audio(\"../assets/simon-says-sound-1.mp3\"),\n  },\n\n  {\n    color: \"green\",\n    selector: document.querySelector(\".js-pad-green\"),\n    sound: new Audio(\"../assets/simon-says-sound-2.mp3\"),\n  },\n\n  {\n    color: \"blue\",\n    selector: document.querySelector(\".js-pad-blue\"),\n    sound: new Audio(\"../assets/simon-says-sound-3.mp3\"),\n  },\n\n  {\n    color: \"yellow\",\n    selector: document.querySelector(\".js-pad-yellow\"),\n    sound: new Audio(\"../assets/simon-says-sound-4.mp3\"),\n  },\n\n  // TODO: Add the objects for the green, blue, and yellow pads. Use object for the red pad above as an example.\n];\n\n/**\n * EVENT LISTENERS\n */\n\npadContainer.addEventListener(\"click\", padHandler);\nstartButton.addEventListener(\"click\", startButtonHandler);\n// TODO: Add an event listener `startButtonHandler()` to startButton.\n\n/**\n * EVENT HANDLERS\n */\n\n/**\n * Called when the start button is clicked.\n *\n * 1. Call setLevel() to set the level of the game\n *\n * 2. Increment the roundCount from 0 to 1\n *\n * 3. Hide the start button by adding the `.hidden` class to the start button\n *\n * 4. Unhide the status element, which displays the status messages, by removing the `.hidden` class\n *\n * 5. Call `playComputerTurn()` to start the game with the computer going first.\n *\n */\nfunction startButtonHandler() {\n  maxRoundCount = setLevel();\n  roundCount++;\n  startButton.classList.add(\"hidden\");\n  statusSpan.classList.remove(\"hidden\");\n  playComputerTurn();\n\n  return { startButton, statusSpan };\n}\n\n/**\n * Called when one of the pads is clicked.\n *\n * 1. `const { color } = event.target.dataset;` extracts the value of `data-color`\n * attribute on the element that was clicked and stores it in the `color` variable\n *\n * 2. `if (!color) return;` exits the function if the `color` variable is falsy\n *\n * 3. Use the `.find()` method to retrieve the pad from the `pads` array and store it\n * in a variable called `pad`\n *\n * 4. Play the sound for the pad by calling `pad.sound.play()`\n *\n * 5. Call `checkPress(color)` to verify the player's selection\n *\n * 6. Return the `color` variable as the output\n */\nfunction padHandler(event) {\n  const { color } = event.target.dataset;\n  if (!color) return; \n  let pad = pads.find(({ _color }) => _color === color);\n  pad.sound.play();\n  checkPress(color);\n  return color;\n}\n\n/**\n * HELPER FUNCTIONS\n */\n\n/**\n * Sets the level of the game given a `level` parameter.\n * Returns the length of the sequence for a valid `level` parameter (1 - 4) or an error message otherwise.\n *\n \n * Each skill level will require the player to complete a different number of rounds, as follows:\n * Skill level 1: 8 rounds\n * Skill level 2: 14 rounds\n * Skill level 3: 20 rounds\n * Skill level 4: 31 rounds\n *\n *\n * Example:\n * setLevel() //> returns 8\n * setLevel(1) //> returns 8\n * setLevel(2) //> returns 14\n * setLevel(3) //> returns 20\n * setLevel(4) //> returns 31\n * setLevel(5) //> returns \"Please enter level 1, 2, 3, or 4\";\n * setLevel(8) //> returns \"Please enter level 1, 2, 3, or 4\";\n *\n */\n\nfunction setLevel(level = 1) {\n  const levels = new Map();\n\n  levels.set(1,8);\n  levels.set(2,14);\n  levels.set(3,20);\n  levels.set(4,31);\n\n  if (levels.has(level))\n  {\n    return levels.get(level);\n  }\n  else \n  {\n   return \"Please enter level 1, 2, 3, or 4\";\n  }\n}\n/**\n * Returns a randomly selected item from a given array.\n *\n * 1. `Math.random()` returns a floating-point, pseudo-random number in the range 0 to less than 1\n *\n * 2. Multiplying the value from `Math.random()` with the length of the array ensures that the range\n * of the random number is less than the length of the array. So if the length of the array is 4,\n * the random number returned will be between 0 and 4 (exclusive)\n *\n * 3. Math.floor() rounds the numbers down to the largest integer less than or equal the given value\n *\n * Example:\n * getRandomItem([1, 2, 3, 4]) //> returns 2\n * getRandomItem([1, 2, 3, 4]) //> returns 1\n */\nfunction getRandomItem(collection) {\n  if (collection.length === 0) return null;\n  const randomIndex = Math.floor(Math.random() * collection.length);\n  return collection[randomIndex];\n}\n\n/**\n * Sets the status text of a given HTML element with a given a message\n */\n\nfunction setText(element, text) {\nelement.textContent = text;\nreturn element;\n}\n\n\n/**\n * Activates a pad of a given color by playing its sound and light\n *\n * 1. Use the `.find()` method to retrieve the pad from the `pads` array and store it in\n * a variable called `pad`\n *\n * 2. Add the `\"activated\"` class to the selected pad\n *\n * 3. Play the sound associated with the pad\n *\n * 4. After 500ms, remove the `\"activated\"` class from the pad\n */\n\n// Morgan notes: how do I make sure its all the colors?\n// added the second part function simonSequence based on google, not sure if correct, need to declare value\n\nfunction activatePad(color) {\nlet pad = pads.find(({ color }) => color === color); \npad.selector.classList.add(\"activated\");\npad.sound.play();\nsetTimeout(() => pad.selector.classList.remove(\"activated\"), 500);\n}\n\n/**\n * Activates a sequence of colors passed as an array to the function\n *\n * 1. Iterate over the `sequence` array using `.forEach()`\n *\n * 2. For each element in `sequence`, use `setTimeout()` to call `activatePad()`, adding\n * a delay (in milliseconds) between each pad press. Without it, the pads in the sequence\n * will be activated all at once\n *\n * 3. The delay between each pad press, passed as a second argument to `setTimeout()`, needs\n * to change on each iteration. The first button in the sequence is activated after 600ms,\n * the next one after 1200ms (600ms after the first), the third one after 1800ms, and so on.\n */\n\n\nfunction activatePads(sequence) {\nsequence.forEach(function (element, index) { setTimeout(() => activatePad(element), 600 * (index + 1)); });\n}\n\n// arrays are 0 based, index starts at 0\n\n/**\n * Allows the computer to play its turn.\n *\n * 1. Add the `\"unclickable\"` class to `padContainer` to prevent the user from pressing\n * any of the pads\n *\n * 2. The status should display a message that says \"The computer's turn...\"\n *\n * 3. The heading should display a message that lets the player know how many rounds are left\n * (e.g., \"`Round ${roundCount} of ${maxRoundCount}`\")\n *\n * 4. Push a randomly selected color into the `computerSequence` array\n *\n * 5. Call `activatePads(computerSequence)` to light up each pad according to order defined in\n * `computerSequence`\n *\n * 6. The playHumanTurn() function needs to be called after the computer’s turn is over, so\n * we need to add a delay and calculate when the computer will be done with the sequence of\n * pad presses. The `setTimeout()` function executes `playHumanTurn(roundCount)` one second\n * after the last pad in the sequence is activated. The total duration of the sequence corresponds\n * to the current round (roundCount) multiplied by 600ms which is the duration for each pad in the\n * sequence.\n */\n\n\n\nfunction playComputerTurn() {\npadContainer.classList.add(\"unclickable\"); \nstatusSpan.innerHTML = \"The computer's turn...\";  \nheading.innerHTML = \"Round \" + roundCount  + \"of\" + maxRoundCount;\ncomputerSequence.push(getRandomItem(pads).color);\nactivatePads(computerSequence);\nsetTimeout(() => playHumanTurn(roundCount), (roundCount * 600) + 1000);\n}\n\n\n\n/**\n * Allows the player to play their turn.\n *\n * 1. Remove the \"unclickable\" class from the pad container so that each pad is clickable again\n *\n * 2. Display a status message showing the player how many presses are left in the round\n */\n\n\nfunction playHumanTurn() {\npadContainer.classList.remove(\"unclickable\");\nstatusSpan.innerHTML = /player/i;\n}\n\n  // TODO: Write your code here.\n\n/**\n * Checks the player's selection every time the player presses on a pad during\n * the player's turn\n *\n * 1. Add the `color` variable to the end of the `playerSequence` array\n *\n * 2. Store the index of the `color` variable in a variable called `index`\n *\n * 3. Calculate how many presses are left in the round using\n * `computerSequence.length - playerSequence.length` and store the result in\n * a variable called `remainingPresses`\n *\n * 4. Set the status to let the player know how many presses are left in the round\n *\n * 5. Check whether the elements at the `index` position in `computerSequence`\n * and `playerSequence` match. If they don't match, it means the player made\n * a wrong turn, so call `resetGame()` with a failure message and exit the function\n *\n * 6. If there are no presses left (i.e., `remainingPresses === 0`), it means the round\n * is over, so call `checkRound()` instead to check the results of the round\n *\n */\nfunction checkPress(color) {\nplayerSequence.add(color);\nlet index = playerSequence.length - 1\nlet remainingPresses = computerSequence.length - playerSequence.length;\nstatusSpan.innerHTML = \"'${remainingPresses} remaining presses'\";\nif (playerSequence(index) !== computerSequence(index))\n{\n  resetGame(\"Game Over!\"); \n  return\n}\n\nif (remainingPresses === 0)\n{\n  checkRound();\n}\n}\n\n\n\n/**\n * Checks each round to see if the player has completed all the rounds of the game * or advance to the next round if the game has not finished.\n *\n * 1. If the length of the `playerSequence` array matches `maxRoundCount`, it means that\n * the player has completed all the rounds so call `resetGame()` with a success message\n *\n * 2. Else, the `roundCount` variable is incremented by 1 and the `playerSequence` array\n * is reset to an empty array.\n * - And the status text is updated to let the player know to keep playing (e.g., \"Nice! Keep going!\")\n * - And `playComputerTurn()` is called after 1000 ms (using setTimeout()). The delay\n * is to allow the user to see the success message. Otherwise, it will not appear at\n * all because it will get overwritten.\n *\n */\n\nfunction checkRound() {\nif (playerSequence.length === maxRoundCount)\n{\nresetGame(\"'Nice work!'\");\nreturn;\n}\nelse {\nroundCount++ \nplayerSequence = [];\nstatusSpan.innerHTML = \"'Great work, keep going!'\";\nsetTimeout(() => playComputerTurn(roundCount, 1000));\n}\n}\n\n\n\n\n\n/**\n * Resets the game. Called when either the player makes a mistake or wins the game.\n *\n * 1. Reset `computerSequence` to an empty array\n *\n * 2. Reset `playerSequence` to an empty array\n *\n * 3. Reset `roundCount` to an empty array\n */\n\n\nfunction resetGame(text) {\n  computerSequence = [];\n  playerSequence = [];\n  roundCount = [];\n  alert(text);\n  setText(heading, \"Simon Says\");\n  startButton.classList.remove(\"hidden\");\n  statusSpan.classList.add(\"hidden\");\n  padContainer.classList.add(\"unclickable\");\n}\n\n\nwindow.statusSpan = statusSpan;\nwindow.heading = heading;\nwindow.padContainer = padContainer;\nwindow.pads = pads;\nwindow.computerSequence = computerSequence;\nwindow.playerSequence = playerSequence;\nwindow.maxRoundCount = maxRoundCount;\nwindow.roundCount = roundCount;\nwindow.startButtonHandler = startButtonHandler;\nwindow.padHandler = padHandler;\nwindow.setLevel = setLevel;\nwindow.getRandomItem = getRandomItem;\nwindow.setText = setText;\nwindow.activatePad = activatePad;\nwindow.activatePads = activatePads;\nwindow.playComputerTurn = playComputerTurn;\nwindow.playHumanTurn = playHumanTurn;\nwindow.checkPress = checkPress;\nwindow.checkRound = checkRound;\nwindow.resetGame = resetGame;\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}